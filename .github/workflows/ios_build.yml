name: iOS Build and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build_ios:
    name: Build iOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Analyze code
      run: flutter analyze --fatal-infos || true
      
    - name: Run tests
      run: flutter test
      
    - name: Setup iOS signing
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate - Convert through PEM format for macOS compatibility
        echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
        
        # Extract certificate and private key separately
        openssl pkcs12 -in certificate.p12 -nokeys -out cert.pem -passin pass:"$IOS_CERTIFICATE_PASSWORD" -passout pass:
        openssl pkcs12 -in certificate.p12 -nocerts -out key.pem -passin pass:"$IOS_CERTIFICATE_PASSWORD" -passout pass:"$IOS_CERTIFICATE_PASSWORD"
        
        # Import certificate and key separately
        security import cert.pem -k build.keychain -T /usr/bin/codesign -A
        security import key.pem -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -A
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        
    - name: Update iOS project settings
      run: |
        # Update bundle identifier in iOS project
        sed -i '' 's/com.example.imkerhubFlutter/com.imkerhub.app/g' ios/Runner/Info.plist
        sed -i '' 's/imkerhub_flutter/ImkerHub/g' ios/Runner/Info.plist
        
    - name: Build iOS app
      run: |
        flutter build ios --release --no-codesign
        
    - name: Build and Archive
      run: |
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $PWD/build/Runner.xcarchive \
          archive
          
    - name: Export IPA
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath $PWD/build/Runner.xcarchive \
          -exportPath $PWD/build \
          -exportOptionsPlist ../ci/ExportOptions.plist
          
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
      run: |
        echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > AuthKey.p8
        xcrun altool --upload-app \
          --type ios \
          --file ios/build/Runner.ipa \
          --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
          --apiIssuer "$APP_STORE_CONNECT_API_ISSUER_ID"
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: iOS-Build
        path: ios/build/Runner.ipa