name: iOS Build and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build_ios:
    name: Build iOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: |
        flutter clean
        flutter pub get
        cd ios && pod install && cd ..
      
    - name: Analyze code
      run: flutter analyze --fatal-infos || true
      
    - name: Run tests
      run: flutter test
      
    - name: Install Apple Certificate and Provisioning Profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Debug certificate import
        echo "Checking certificates in keychain:"
        security find-identity -v -p codesigning $KEYCHAIN_PATH
        
        # Set partition list for codesign access
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Extract profile info
        PROFILE_UUID=$(grep -aA1 UUID $PP_PATH | grep string | sed 's/.*<string>//;s/<\/string>.*//')
        PROFILE_NAME=$(grep -aA1 -E '<key>Name</key>' $PP_PATH | grep string | sed 's/.*<string>//;s/<\/string>.*//')
        
        echo "Provisioning Profile UUID: $PROFILE_UUID"
        echo "Provisioning Profile Name: $PROFILE_NAME"
        
        # Install with UUID name
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
        
        # Update Xcode project with correct profile name
        sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = \"ImkerHub Distribution\"/PROVISIONING_PROFILE_SPECIFIER = \"$PROFILE_NAME\"/g" ios/Runner.xcodeproj/project.pbxproj
        
    - name: Build IPA directly
      run: |
        # List available SDKs
        xcodebuild -showsdks
        
        # Set deployment target and build
        export IPHONEOS_DEPLOYMENT_TARGET=13.0
        flutter build ipa --release --export-options-plist=ci/ExportOptions.plist
          
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
      run: |
        echo -n "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
        xcrun notarytool submit build/ios/ipa/*.ipa \
          --key AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8 \
          --key-id $APP_STORE_CONNECT_API_KEY_ID \
          --issuer $APP_STORE_CONNECT_API_ISSUER_ID \
          --wait
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: iOS-Build
        path: build/ios/ipa/*.ipa
        
    - name: Clean up keychain
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
        rm -f ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision || true
        rm -f AuthKey_*.p8 || true